package com.peisia.controller;

import java.net.URI;
import java.net.URISyntaxException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.peisia.dto.RiotDto;

import lombok.extern.log4j.Log4j;


@Log4j
@Controller
@RequestMapping("/riot")
public class RiotApiController {

	@GetMapping("/search")
	public String search(@RequestParam("searchName") String searchName, Model model) {
		//// 우리나라 공공 api ////
		// 인코딩 인증키
		
		String API_KEY = "RGAPI-30e18eaf-c031-44dd-9c90-9db8516afc48"; // 매일매일 바꿔줘야함
		String API_URL = "http://kr.api.riotgames.com/lol/summoner/v4/summoners/by-name/" + searchName + "?api_key="
				+ API_KEY;

		RestTemplate restTemplate = new RestTemplate();

		//// **** 중요 **** uri
		URI uri = null; // java.net.URI 임포트 하셈
		try {
			uri = new URI(API_URL);
		} catch (URISyntaxException e) {
			e.printStackTrace();
		}
		
		RiotDto RD = restTemplate.getForObject(uri, RiotDto.class);
		//이건 방식이 엄청 여러가지있음.
		//
		String encordId = RD.id;
		log.info(encordId);
		String API_PRIMARY = "http://kr.api.riotgames.com/lol/league/v4/entries/by-summoner/" + encordId + "?api_key="
				+ API_KEY;
		RestTemplate restTemplate2 = new RestTemplate();
		log.info(API_PRIMARY);
		//// **** 중요 **** uri
		URI uri2 = null; // java.net.URI 임포트 하셈
		try {
			uri = new URI(API_PRIMARY);
		} catch (URISyntaxException e) {
			e.printStackTrace();
		}
		RiotDto RDD = restTemplate2.getForObject(uri2, RiotDto.class);

		model.addAttribute("asd",RDD);
		return "/riot/search";
	}
	
	ObjectMapper objectMapper = new ObjectMapper();
	@GetMapping("/searchss")
	public void searchss(
			@RequestParam("searchName") String searchName,
			@RequestParam("tag") String tag,
			Model model) {
		RiotDto riot = new RiotDto();
		// UTF-8형싟으로 변환
		String characterName = URLEncoder.encode(searchName, StandardCharsets.UTF_8);
		String tagName = URLEncoder.encode(tag, StandardCharsets.UTF_8);
		// 매일매일 바꿔줘야함
		String API_KEY = "RGAPI-415bd1fb-ea22-4d82-b08e-5a65a1dec2f1";
		// 
		String API_URI = "https://asia.api.riotgames.com/riot/account/v1/accounts/by-riot-id/"+characterName+"/"+tagName+"?api_key="
				+ API_KEY;
		// 내장객채 URL or URI (JSON화)관련
		RestTemplate restTemplate = new RestTemplate();
		
		//// **** 중요 **** uri
		URI uri = null; // java.net.URI 임포트 하셈
		try {
			uri = new URI(API_URI);
		} catch (URISyntaxException e) {
			e.printStackTrace();
		}
		
		// JSON 형식으로 문자열 압축
		String RD = restTemplate.getForObject(uri, String.class);
		
		try {
            // JSON 문자열을 RiotDto 객체로 변환
			Gson gson = new Gson();
			riot = objectMapper.readValue(RD,RiotDto.class);
        } catch (Exception e) {
            e.printStackTrace();
        }
		System.out.println(RD);
		
		
		model.addAttribute("asdf",RD);
		
//		RiotDto riotDto = (RiotDto)model.getAttribute("asdf");
//		
//		String puuid = riotDto.getPuuid();
//		System.out.println("puuid: " + puuid);
	}
}
